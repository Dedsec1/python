track1_b2a = {
		"000000": " ",
		"000001": "@",
		"000010": "0",
		"000011": "P",
		"000100": "(",
		"000101": "H",
		"000110": "8",
		"000111": "X",
		"001000": "$",
		"001001": "D",
		"001010": "4",
		"001011": "T",
		"001100": "`",
		"001101": "L",
		"001110": "<",
		"001111": "\\",
		"010000": "\"",
		"010001": "B",
		"010010": "2",
		"010011": "R",
		"010100": "*",
		"010101": "J",
		"010110": ":",
		"010111": "Z",
		"011000": "&",
		"011001": "F",
		"011010": "6",
		"011011": "V",
		"011100": ".",
		"011101": "N",
		"011110": ">",
		"011111": "^",
		"100000": "!",
		"100001": "A",
		"100010": "1",
		"100011": "Q",
		"100100": ")",
		"100101": "I",
		"100110": "9",
		"100111": "Y",
		"101000": "%",
		"101001": "E",
		"101010": "5",
		"101011": "U",
		"101100": ",",
		"101101": "M",
		"101110": "=",
		"101111": "]",
		"110000": "#",
		"110001": "C",
		"110010": "3",
		"110011": "S",
		"110100": "+",
		"110101": "K",
		"110110": ";",
		"110111": "[",
		"111000": "'",
		"111001": "G",
		"111010": "7",
		"111011": "W",
		"111100": "/",
		"111101": "O",
		"111110": "?",
		"111111": "_",
	}
	
track1_a2b = {
		" ": "000000",
		"@": "000001",
		"0": "001101",
		"P": "000011",
		"(": "000100",
		"H": "000101",
		"8": "000110",
		"X": "000111",
		"$": "001000",
		"D": "001001",
		"4": "001010",
		"T": "001011",
		"`": "001100",
		"L": "001101",
		"<": "001110",
		"\\": "001111",
		"\"": "010000",
		"B": "010001",
		"2": "010010",
		"R": "010011",
		"*": "010100",
		"J": "010101",
		":": "010110",
		"Z": "010111",
		"&": "011000",
		"F": "011001",
		"6": "011010",
		"V": "011011",
		".": "011100",
		"N": "011101",
		">": "011110",
		"^": "011111",
		"!": "100000",
		"A": "100001",
		"1": "100010",
		"Q": "100011",
		")": "100100",
		"I": "100101",
		"9": "100110",
		"Y": "100111",
		"%": "101000",
		"E": "101001",
		"5": "101010",
		"U": "101011",
		",": "101100",
		"M": "101101",
		"=": "101110",
		"]": "101111",
		"#": "110000",
		"C": "110001",
		"3": "110010",
		"S": "110011",
		"+": "110100",
		"K": "110101",
		";": "110110",
		"[": "110111",
		"'": "111000",
		"G": "111001",
		"7": "111010",
		"W": "111011",
		"/": "111100",
		"O": "111101",
		"?": "111110",
		"_": "111111",
	}

def create_h2b(hex_string):
	bits = ""
	for h in hex_string:
		if h == '0':
			bits += '0000'
		elif h == '1':
			bits += '0001'
		elif h == '2':
			bits += '0010'
		elif h == '3':
			bits += '0011'
		elif h == '4':
			bits += '0100'
		elif h == '5':
			bits += '0101'
		elif h == '6':
			bits += '0110'
		elif h == '7':
			bits += '0111'
		elif h == '8':
			bits += '1000'
		elif h == '9':
			bits += '1001'
		elif h == 'A':
			bits += '1010'
		elif h == 'B':
			bits += '1011'
		elif h == 'C':
			bits += '1100'
		elif h == 'D':
			bits += '1101'
		elif h == 'E':
			bits += '1110'
		elif h == 'F':
			bits += '1111'
	return bits
	
def create_7bits(bit_string):
	bytes = []
	index = 0
	while(bit_string[index:(index+7):]):
		bytes.append(bit_string[index:(index+7)])
		index += 7
	return bytes
	
def create_7bit2a(bit7_string):
	iso = ""
	left = ""
	for i in bit7_string:
		if len(i) >= 6:
			#if verbose: print i+": "+track1_b2a[i[:6]]
			iso += track1_b2a[i[:6]]
		else: 
			left = i
	return (iso,left)